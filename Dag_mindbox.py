from airflow import DAG

from airflow.operators.python_operator import PythonOperator

import datetime as dt

import requests as req

import pandas as pd

import json

import time

import os


class SimpleChClient:

    def __init__(self, CH_HOST, CH_CASERT):

        self.CH_HOST = CH_HOST

        self.CH_CASERT = CH_CASERT

        self.DBuser = 'js_u6_cl_user'

        self.DBpassw = 'QV8veWm7b8LQ'

    def get_clickhouse_data(self, query, connection_timeout=1500):

        r = req.post(self.CH_HOST, params={'query': query, 'user': self.DBuser, 'password': self.DBpassw},

                     timeout=connection_timeout, verify=self.CH_CASERT)

        if r.status_code == 200:

            return r.text

        else:

            raise ValueError(r.text)

    def upload(self, table, content, data_format='TabSeparatedWithNames'):

        content = content.to_csv(sep='\t', encoding='UTF-8', index=False, float_format='%.0f').replace('\r', '')

        content = content.encode('utf-8')

        query_dict = {

            'query': f'INSERT INTO {table} FORMAT {data_format}',

            'user': self.DBuser,

            'password': self.DBpassw

        }

        r = req.post(self.CH_HOST, data=content, params=query_dict, verify=self.CH_CASERT)

        result = r.text

        if r.status_code == 200:

            return result

        else:

            raise ValueError(r.text)


class MindboxReportProcessor:

    def __init__(self, ch_client):

        self.ch_client = ch_client

        self.key = None

        self.dict_ = {

            'ACTIVE_E-mail_Transaction_–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–Ω–ª–∞–π–Ω-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ 24 —á–∞—Å–∞: –û–±—â–∞—è c –ë–∏–ª–µ—Ç–∏–∫–∞–º–∏': '24-hours-checkin-reminder-mail',

            'Active_E-mail_Transaction_–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –≤—ã–ª–µ—Ç–µ –∑–∞ 48 —á–∞—Å–æ–≤: –û–±—â–∞—è- —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏': '48-hours-services-upsale-mail',

            '–ü–æ–¥–±–æ—Ä–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤': 'promo-destinations-sale-20240320-happiness-day',

            '–õ–µ—Ç–∏–º –≤ –°—Ç–∞–º–±—É–ª': 'new-destination-dme-ist',

            '–õ–µ—Ç–∏–º –≤ –ü–µ–∫–∏–Ω': 'new-destinations-pekin',

            '02.04 –ü–æ–¥–±–æ—Ä–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤': 'promo-destinations-sale-20240402-fresh-view-to-the-world',

            '–ü–æ–¥–±–æ—Ä–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö SVX': 'promo-destinations-sale-20240410-profitable-to-fly-for-ekb',

            '–ü–æ–¥–±–æ—Ä–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –±–µ–∑ SVX': 'promo-destinations-sale-20240410-profitable-to-fly',

            'üòá –î–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ –≤ —Ñ–æ–Ω–¥—ã': 'loyalty-program-charity-philanthropist-day',

            '–ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å –≤ –∞–ø—Ä–µ–ª–µ': 'promo-destinations-sale-20240415-business-class',

            'üéÅ –°–¥–µ–ª–∞–π—Ç–µ —Å–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ –≤ –º–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏': 'promo-destinations-sale-20240425-may-holidays-gift',

            '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –î–æ–º–æ–¥–µ–¥–æ–≤–æ': '—Åheck-in-closes-60-minutes-before-departure',

            'üí® –£—Å–ø–µ–≤–∞–π—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏': 'promo-destinations-sale-20240305-have-time-to-travel-in-may-holidays',

            'üë®‚Äçüë©‚Äçüë¶ –í—ã–≥–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –¥–µ–Ω—å —Å–µ–º—å–∏': 'promo-destinations-sale-20240515-family-in-flight',

            'ü§© –°–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã': 'promo-destinations-sale-20240523-the-most-popular-discount-tickets-this-year',

            'üèÑ‚Äç‚ôÇÔ∏è –í—Ä—ã–≤–∞–µ–º—Å—è –≤ –ª–µ—Ç–æ —Å –Ω–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–æ–π –≤—ã–≥–æ–¥–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤!': 'promo-destinations-sale-20240528-were-rushing-into-summer',

            'üè∞ –õ–µ—Ç–∏–º –≤ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 'promo-destinations-flying-to-kaliningrad',

            '–ü–µ–∫–∏–Ω –æ—Ç 8 400‚ÇΩ –∏ –¥—Ä—É–≥–∏–µ –≤—ã–≥–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã!': 'mass-promo-routes-20240605-into-pekin',

            'üéÅ –†–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –º–µ—á—Ç—ã –≤–º–µ—Å—Ç–µ —Å —Å–µ—Ä–≤–∏—Å–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ¬´–û—Ç–µ–ª–ª–æ¬ª': 'promo-otello-u6-telegram-travel-contest',

            '‚ö°Ô∏è–°–Ω–∏–∂–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ –°—Ç–∞–º–±—É–ª –¥–ª—è –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞!': 'promo-destination-sale-20240607-stambul-time-to-save-money',

            '–ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º': 'promo-destinations-20240613-its-profitable-to-fly',

            'üåä –õ–æ–≤–∏—Ç–µ –≤–æ–ª–Ω—É —Å –Ω–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–æ–π –≤—ã–≥–æ–¥–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤!': 'promo-destinations-sale-20240619-you-hunt-summer',

            'üåû –ê –≤–æ—Ç –∏ –∏—é–ª—å! –£—Å–ø–µ–≤–∞–π—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ª–µ—Ç–æ–º': 'promo-destinations-sale-20240627-time-for-best-tickets',

            'Travelty-IOS-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å': 'travelty-mail-segment-20231121',

            'ü§ó –í—ã–≥–æ–¥–Ω—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –∫–æ –¥–Ω—é —Å–µ–º—å–∏, –ª—é–±–≤–∏ –∏ –≤–µ—Ä–Ω–æ—Å—Ç–∏!': 'promo-destinations-sale-20240704-family-day',

            '–¢–∞—à–∫–µ–Ω—Ç –æ—Ç 11 741 ‚ÇΩ –∏ –¥—Ä—É–≥–∏–µ –≤—ã–≥–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã!': 'promo-destinations-sale-20240712-flying-in-tashkent',

            '–ï—Ä–µ–≤–∞–Ω –æ—Ç 11 883 ‚ÇΩ –∏ –¥—Ä—É–≥–∏–µ –≤—ã–≥–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã!': 'promo-destinations-sale-20240719-flying-in-erevan',

            'üí® –í–Ω–µ–∑–∞–ø–Ω–∞—è –≤—ã–≥–æ–¥–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ —Ç–æ–ø–æ–≤—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π': 'promo-destinations-sale-20240722-urgent-and-profitable',

            '–õ–µ—Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∞ –≤—ã–≥–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã - –Ω–µ—Ç!': 'promo-destinations-sale-20240816-last-summer-days',

            '–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è —Å –ª–µ—Ç–æ–º —Å–æ —Å–∫–∏–¥–∫–æ–π!': 'promo-destinations-sale-20240823-goodbye-summer',

            '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ –æ—Ç 2289 ‚ÇΩ –∏ –µ—â–µ –º–Ω–æ–≥–æ –≤—ã–≥–æ–¥–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤!': 'promo-destinations-sale-20240828-flying-to-kaliningrad',

            '–ü–µ—Ä–µ–≤–µ—Ä–Ω—É–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∞ —Ç–∞–º –Ω–æ–≤—ã–µ –æ—Å–µ–Ω–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 'promo-destinations-sale-20240906-new-autumn-travel',

            '–¢–µ–ø–ª–∞—è –æ—Å–µ–Ω—å —Å –ø–æ–¥–±–æ—Ä–∫–æ–π –≤—ã–≥–æ–¥–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤': 'promo-destinations-sale-20240911-warm-autumn',

            '‚ö°Ô∏è–°–Ω–∏–∂–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ –ø–µ—Ä–µ–ª—ë—Ç—ã –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞! –¢–æ–ª—å–∫–æ –¥–æ 15 —Å–µ–Ω—Ç—è–±—Ä—è': 'promo-destinations-sale-20240913-lightning',

            '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ —è—Ä–∫—É—é –æ—Å–µ–Ω—å —Å –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–æ–π –≤—ã–≥–æ–¥–Ω—ã—Ö –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤!': 'promo-destinations-sale-20240920-bright-golden-autumn',

            '–î–µ–Ω—å –¢—É—Ä–∏–∑–º–∞ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã!': 'promo-destinations-sale-20240927-happy-tourism-day',

            '–í—ã–≥–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã –≤–æ –≤—Å–µ–º–∏—Ä–Ω—ã–π –¥–µ–Ω—å —É–ª—ã–±–∫–∏': 'promo-destinations-sale-20241004-worldwide-smile-day',

            '–°–æ–≥—Ä–µ–≤–∞–π—Ç–µ—Å—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏!': 'promo-destinations-sale-20241011-keep-warm-with-travel'

        }

        self.dict2 = {

            'ACTIVE_E-mail_Transaction_–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–Ω–ª–∞–π–Ω-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ 24 —á–∞—Å–∞: –û–±—â–∞—è c –ë–∏–ª–µ—Ç–∏–∫–∞–º–∏',

            'Active_E-mail_Transaction_–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –≤—ã–ª–µ—Ç–µ –∑–∞ 48 —á–∞—Å–æ–≤: –û–±—â–∞—è- —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏'

        }

    def convert(self, a):

        return self.dict_.get(a, '')

    def send_request(self):

        query = json.loads(

            req.post(

                url='https://api.mindbox.ru/v3/operations/sync?endpointId=Uralairlines.Export&operation=ExportDashboardMailingsDynamics',

                headers={

                    'Content-Type': 'application/json; charset=utf-8',

                    'Accept': 'application/json',

                    'Authorization': 'SecretKey APW6qy9hLY626cCo9S0Uzjlszd9UY8Ys'},

                json={

                    "sinceDate": "2023-06-01",

                    "tillDate": str(dt.date.today()-dt.timedelta(days=1))

                }).text)

        print(query['exportId'])

        return query['exportId']  # –í–æ–∑–≤—Ä–∞—Ç ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ

    def wait_for_report(self, **kwargs):

        task_instance = kwargs['ti']

        export_id = task_instance.xcom_pull(task_ids='send_request')

        while True:

            result = json.loads(

                req.post(

                    'https://api.mindbox.ru/v3/operations/sync?endpointId=Uralairlines.Export&operation=ExportDashboardMailingsDynamics',

                    headers={

                        'Content-Type': 'application/json; charset=utf-8',

                        'Accept': 'application/json',

                        'Authorization': 'SecretKey APW6qy9hLY626cCo9S0Uzjlszd9UY8Ys'},

                    json={

                        'exportId': export_id

                    }).text)

            if result['exportResult']['processingStatus'] == 'Ready':
                url = result['exportResult']['urls'][0]

                break

            time.sleep(5)

        return url  # –í–æ–∑–≤—Ä–∞—Ç URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞

    def download_csv(self, **kwargs):

        task_instance = kwargs['ti']

        url = task_instance.xcom_pull(task_ids='wait_for_report')

        resp = req.get(url)

        resp.encoding = 'UTF-8'

        with open('/home/ivan/airflow/dags/mindbox_report_procesing/file.csv', 'w', encoding='UTF-8') as file:
            for line in resp.text.split('\n'):
                file.write(line)

    def process_report(self):

        df = pd.read_csv('/home/ivan/airflow/dags/mindbox_report_procesing/file.csv', sep=';', encoding='UTF-8')

        df['ReportDate'] = pd.to_datetime(df['ReportDate'], format='%d.%m.%Y').dt.strftime('%Y-%m-%d')

        df['ReportStartDate'] = pd.to_datetime(df['ReportStartDate'], format='%d.%m.%Y %H:%M').dt.strftime(

            '%Y-%m-%d %H:%M')

        df = df.drop(columns=['ReportOrders', 'ReportMessagesTotal', 'ReportDeliveryRate', 'ReportOpenRate',

                              'ReportClickRate', 'ReportCTOR', 'ReportConversionRate', 'ReportUnsubscribeRate',

                              'ReportSpamRate', 'ReportBounceRate', 'ReportConversions', 'ReportConversionsRevenue',

                              'ReportAverageOrderValue', 'ReportConversionRevenuePerRecipient', 'ReportSpam',

                              'ReportBounced', 'ReportTemplate', 'ReportFolder', 'ReportTags', 'ReportBrand',

                              'ReportHeatMap', 'ReportMailingVariantNum'])

        df['ReportRevenue'] = df['ReportMessageName'].apply(self.convert)

        df['ReportSubject'] = df['ReportMessageName'].apply(lambda x: 'email' if x in self.dict2 else '')

        df['ReportMessageLink'] = df['ReportMessageName'].apply(lambda x: 'booking' if x in self.dict2 else '')

        df.columns = [

            'date', 'mailing_name', 'utm_source', 'utm_medium', 'utm_campaign',

            'send', 'delivered', 'opened', 'clicked', 'unsubscribed',

            'start_date', 'channel', 'campaign', 'category', 'mailing_id'

        ]

        df = df.sort_values(by='date')

        return df  # –í–æ–∑–≤—Ä–∞—Ç DataFrame –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

    def upload_to_clickhouse(self, **kwargs):

        df = kwargs['ti'].xcom_pull(task_ids='process_report')

        table = 'U6_web.mindbox_stats'

        self.ch_client.get_clickhouse_data(f'DROP TABLE IF EXISTS {table}')  # DROP TABLE

        self.ch_client.get_clickhouse_data(f'''

            CREATE TABLE {table} (

                date Date,

                mailing_name String,

                utm_source String,

                utm_medium String,

                utm_campaign String,

                send Int64,

                delivered Int64,

                opened Int64,

                clicked Int64,

                unsubscribed Int64,

                start_date String,

                channel String,

                campaign String,

                category String,

                mailing_id String

            ) ENGINE = MergeTree() 

            ORDER BY (date) 

            SETTINGS index_granularity=8192

        ''')  # CREATE TABLE

        self.ch_client.upload(table, df)  # UPLOAD


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DAG

default_args = {
    'owner': 'airflow',
    'start_date': dt.datetime(2024, 10, 20),
    'retries': 1,
}

dag = DAG('mindbox_report_processing', default_args=default_args, schedule_interval='0 21 * * *')

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ SimpleChClient

ch_client = SimpleChClient(CH_HOST='https://rc1a-dqkj593ugddfodop.mdb.yandexcloud.net:8443',
                           CH_CASERT='/home/ivan/airflow/dags/mindbox_report_procesing/YandexInternalRootCA.crt')

report_processor = MindboxReportProcessor(ch_client)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á

task1 = PythonOperator(

    task_id='send_request',

    python_callable=report_processor.send_request,

    dag=dag,

)

task2 = PythonOperator(

    task_id='wait_for_report',

    python_callable=report_processor.wait_for_report,

    provide_context=True,

    dag=dag,

)

task3 = PythonOperator(

    task_id='download_csv',

    python_callable=report_processor.download_csv,

    provide_context=True,

    dag=dag,

)

task4 = PythonOperator(

    task_id='process_report',

    python_callable=report_processor.process_report,

    dag=dag,

)

task5 = PythonOperator(

    task_id='upload_to_clickhouse',

    python_callable=report_processor.upload_to_clickhouse,

    provide_context=True,

    dag=dag,

)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á

task1 >> task2 >> task3 >> task4 >> task5
